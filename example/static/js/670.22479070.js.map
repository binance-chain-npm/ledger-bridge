{"version":3,"file":"static/js/670.22479070.js","mappings":"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","sources":["pages/eth.tsx"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { BSCLedgerBridge } from '@binance-chain/ledger-bridge';\nimport { FeeMarketEIP1559Transaction } from '@ethereumjs/tx';\nimport Common, { Chain, Hardfork } from '@ethereumjs/common';\nimport { Button, Card, notification, Input } from 'antd';\nimport Web3 from 'web3';\n\nconst hdPaths = {\n  LedgerLive: `m/44'/60'/0'/0/0`,\n  Legacy: `m/44'/60'/0'`,\n};\nconst bridge = new BSCLedgerBridge();\nconst common = new Common({ chain: Chain.Ropsten, hardfork: Hardfork.London });\nconst fakeTx = FeeMarketEIP1559Transaction.fromTxData(\n  {\n    nonce: '0x00',\n    gasLimit: '0x5208',\n    to: '0x0000000000000000000000000000000000000000',\n    value: '0x2386F26FC10000',\n    chainId: '0x03',\n    type: '0x02',\n    maxFeePerGas: '0x09184e72a000',\n    maxPriorityFeePerGas: '0x01',\n  },\n  {\n    common,\n  },\n);\n\nconst GetAddressCard = () => {\n  const [address, setAddress] = useState<{ address: string; hdPath: string }[]>([]);\n  const [loading, setLoading] = useState(false);\n  const handle = useCallback(async () => {\n    setLoading(true);\n\n    try {\n      setAddress(await bridge.getFirstPage(hdPaths.LedgerLive));\n    } catch (e) {\n      console.error(e);\n      notification.error({ message: e.message || e });\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      console.log(address[0] && (await bridge.getPublicKey(hdPaths.LedgerLive)));\n    })();\n  }, [address]);\n\n  return (\n    <Card\n      bordered={false}\n      loading={loading}\n      title={\n        <div>\n          Ledger ETH Account Address{' '}\n          <Button size=\"small\" onClick={handle}>\n            Get address\n          </Button>\n        </div>\n      }\n    >\n      {address.map((item) => (\n        <p key={item.address}>\n          {item.address} (hdPath: {item.hdPath})\n        </p>\n      ))}\n    </Card>\n  );\n};\n\nconst SignTransactionCard = () => {\n  const [loading, setLoading] = useState(false);\n  const [tx, setTx] = useState(JSON.stringify(fakeTx));\n  const [signedTx, setSingedTx] = useState('');\n\n  const handleChange = useCallback(async (evt) => {\n    setTx(evt.target.value);\n  }, []);\n\n  const handleSign = useCallback(async () => {\n    try {\n      setLoading(true);\n      const fakeTx = FeeMarketEIP1559Transaction.fromTxData(JSON.parse(tx), { common });\n      const _tx = await bridge.signTransaction(fakeTx as any, \"m/44'/60'/0'/0/0\");\n\n      console.log(_tx.toJSON());\n      setSingedTx(`0x${_tx.serialize().toString('hex')}`);\n    } catch (e) {\n      console.error(e);\n      notification.error({ message: e.message || e });\n    } finally {\n      setLoading(false);\n    }\n  }, [tx]);\n\n  const haneleSend = useCallback(async () => {\n    const web3 = new Web3('https://ropsten.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161');\n\n    const result = await web3.eth.sendSignedTransaction(signedTx);\n    console.log(result);\n  }, [signedTx]);\n\n  return (\n    <Card\n      bordered={false}\n      loading={loading}\n      title={<div>Ledger ETH SignTransaction (EIP-1559) </div>}\n    >\n      <Input.TextArea\n        style={{ width: 300, height: 200, marginBottom: 10 }}\n        value={tx}\n        onChange={handleChange}\n      />\n      <div>\n        <Button.Group>\n          <Button onClick={handleSign}>Sign</Button>\n          <Button onClick={haneleSend}>Send</Button>\n        </Button.Group>\n      </div>\n\n      <pre>SignedTx: {signedTx}</pre>\n    </Card>\n  );\n};\n\nconst SignMessage = () => {\n  const [hdPath, setHdPath] = useState(hdPaths.LedgerLive);\n  const [message, setMessage] = useState('');\n  const [signedMsg, setSignedMsg] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handle = useCallback(async () => {\n    try {\n      setLoading(true);\n      await bridge.unlock();\n      const msg = await bridge.signMessage(message, hdPath);\n      setSignedMsg(msg);\n    } catch (e) {\n      console.error(e);\n      notification.error({ message: e.message || e });\n    } finally {\n      setLoading(false);\n    }\n  }, [hdPath, message]);\n\n  return (\n    <Card\n      bordered={false}\n      loading={loading}\n      title={\n        <div>\n          Ledger ETH SignMessage (EIP-1559){' '}\n          <Button size=\"small\" onClick={handle}>\n            Sign\n          </Button>\n        </div>\n      }\n    >\n      hdPath: <Input value={hdPath} onChange={(e) => setHdPath(e.target.value)} />\n      message: <Input value={message} onChange={(e) => setMessage(e.target.value)} />\n      <pre>Signed message: {JSON.stringify(signedMsg, null, 2)}</pre>\n    </Card>\n  );\n};\n\nexport default () => (\n  <Card bordered={true} bodyStyle={{ background: 'lightblue' }}>\n    <GetAddressCard />\n    <SignTransactionCard />\n    <SignMessage />\n  </Card>\n);\n"],"names":["hdPaths","bridge","BSCLedgerBridge","common","Common","chain","Chain","hardfork","Hardfork","fakeTx","FeeMarketEIP1559Transaction","nonce","gasLimit","to","value","chainId","type","maxFeePerGas","maxPriorityFeePerGas","GetAddressCard","useState","address","setAddress","loading","setLoading","handle","useCallback","getFirstPage","console","error","message","useEffect","getPublicKey","log","bordered","title","size","onClick","map","item","hdPath","SignTransactionCard","JSON","stringify","tx","setTx","signedTx","setSingedTx","handleChange","evt","target","handleSign","parse","signTransaction","_tx","toJSON","serialize","toString","haneleSend","web3","Web3","eth","sendSignedTransaction","result","style","width","height","marginBottom","onChange","SignMessage","setHdPath","setMessage","signedMsg","setSignedMsg","unlock","signMessage","msg","e","bodyStyle","background"],"sourceRoot":""}