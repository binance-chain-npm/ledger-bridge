{"version":3,"file":"static/js/662.a6514626.js","mappings":"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","sources":["../node_modules/@binance-chain/javascript-sdk/lib/ledger|sync","pages/bbc.tsx"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 36757;\nmodule.exports = webpackEmptyContext;","import React, { useState, useEffect } from 'react';\nimport { Button, Card, notification, Input } from 'antd';\nimport { BBCLedgerBridge } from '@binance-chain/ledger-bridge';\nimport { Transaction } from '@binance-chain/javascript-sdk';\n\nconst bridge = new BBCLedgerBridge();\nbridge.setHrp('tbnb');\nconst fakeTx = new Transaction({\n  accountNumber: 1,\n  chainId: 'bnbchain-1000',\n  memo: '',\n  msg: {},\n  // type: 'NewOrderMsg',\n  sequence: 29,\n  source: 0,\n});\nconst baseHdPath = '44/714/0/0/0';\n\nconst GetAddressCard = () => {\n  const [address, setAddress] = React.useState<\n    { address: string; hdPath: string }[]\n  >([]);\n  const [loading, setLoading] = React.useState(false);\n\n  const handle = React.useCallback(async () => {\n    setLoading(true);\n\n    try {\n      setAddress(await bridge.getFirstPage(baseHdPath));\n    } catch (e) {\n      console.error(e);\n      notification.error({ message: e.message || e });\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      console.log(address[0] && (await bridge.getPublicKey(baseHdPath)));\n    })();\n  }, [address]);\n\n  return (\n    <Card\n      bordered={false}\n      loading={loading}\n      title={\n        <div>\n          Ledger BBC Account Address{' '}\n          <Button size=\"small\" onClick={handle}>\n            Get address\n          </Button>\n        </div>\n      }>\n      {address.map(item => (\n        <p key={item.address}>\n          {item.address} (balance: {item.hdPath})\n        </p>\n      ))}\n    </Card>\n  );\n};\n\nconst SignTransactionCard = () => {\n  const [tx, setTx] = React.useState({});\n  const [loading, setLoading] = React.useState(false);\n  const handle = React.useCallback(async () => {\n    try {\n      setLoading(true);\n      const _tx = await bridge.signTransaction(fakeTx, baseHdPath);\n      setTx(_tx);\n    } catch (e) {\n      console.error(e);\n      notification.error({ message: e.message || e });\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return (\n    <Card\n      bordered={false}\n      title={\n        <div>\n          Ledger BBC SignTransaction{' '}\n          <Button size=\"small\" onClick={handle}>\n            Sign\n          </Button>\n        </div>\n      }\n      loading={loading}>\n      <pre>tx: {JSON.stringify(fakeTx, null, 2)}</pre>\n      <pre>signed tx: {JSON.stringify(tx, null, 2)}</pre>\n    </Card>\n  );\n};\n\nconst SignMessage = () => {\n  const [hdPath, setHdPath] = useState(baseHdPath);\n  const [message, setMessage] = useState('');\n  const [signedMsg, setSignedMsg] = useState('');\n  const [loading, setLoading] = React.useState(false);\n\n  const handle = React.useCallback(async () => {\n    try {\n      setLoading(true);\n      const msg = await bridge.signMessage(message, hdPath);\n      setSignedMsg(msg);\n    } catch (e) {\n      console.error(e);\n      notification.error({ message: e.message || e });\n    } finally {\n      setLoading(false);\n    }\n  }, [hdPath, message]);\n\n  return (\n    <Card\n      bordered={false}\n      loading={loading}\n      title={\n        <div>\n          Ledger BBC SignMessage{' '}\n          <Button size=\"small\" onClick={handle}>\n            Sign\n          </Button>\n        </div>\n      }>\n      hdPath: <Input value={hdPath} onChange={e => setHdPath(e.target.value)} />\n      message:{' '}\n      <Input value={message} onChange={e => setMessage(e.target.value)} />\n      <pre>Signed message: {JSON.stringify(signedMsg, null, 2)}</pre>\n    </Card>\n  );\n};\n\nexport default () => (\n  <Card bordered={true} bodyStyle={{ background: 'lightgreen' }}>\n    <GetAddressCard />\n    <SignTransactionCard />\n    <SignMessage />\n  </Card>\n);\n"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","id","module","exports","bridge","BBCLedgerBridge","setHrp","fakeTx","Transaction","accountNumber","chainId","memo","msg","sequence","source","baseHdPath","GetAddressCard","React","address","setAddress","loading","setLoading","handle","getFirstPage","console","error","message","useEffect","getPublicKey","log","bordered","title","size","onClick","map","item","hdPath","SignTransactionCard","tx","setTx","signTransaction","_tx","JSON","stringify","SignMessage","useState","setHdPath","setMessage","signedMsg","setSignedMsg","signMessage","value","onChange","target","bodyStyle","background"],"sourceRoot":""}