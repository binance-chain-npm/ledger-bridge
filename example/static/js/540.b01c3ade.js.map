{"version":3,"file":"static/js/540.b01c3ade.js","mappings":"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","sources":["pages/bsc.tsx"],"sourcesContent":["import { BSCLedgerBridge } from '@binance-chain/ledger-bridge';\nimport { Transaction } from '@ethereumjs/tx';\nimport { Button, Card, notification, Input } from 'antd';\nimport React, { useEffect, useState } from 'react';\n\nconst hdPaths = {\n  LedgerLive: `m/44'/60'/0'/0/0`,\n  Legacy: `m/44'/60'/0'`,\n};\nconst bridge = new BSCLedgerBridge();\nconst fakeTx = new Transaction({\n  nonce: '0x00',\n  gasPrice: '0x09184e72a000',\n  gasLimit: '0x2710',\n  to: '0x0000000000000000000000000000000000000000',\n  value: '0x00',\n  data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',\n  // // EIP 155 chainId - mainnet: 1, ropsten: 3\n  // chainId: 1,\n});\n\nconst GetAddressCard = () => {\n  const [address, setAddress] = React.useState<\n    { address: string; hdPath: string }[]\n  >([]);\n  const [loading, setLoading] = React.useState(false);\n  const handle = React.useCallback(async () => {\n    setLoading(true);\n\n    try {\n      setAddress(await bridge.getFirstPage(hdPaths.LedgerLive));\n    } catch (e) {\n      console.error(e);\n      notification.error({ message: e.message || e });\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      console.log(\n        address[0] && (await bridge.getPublicKey(hdPaths.LedgerLive)),\n      );\n    })();\n  }, [address]);\n\n  return (\n    <Card\n      bordered={false}\n      loading={loading}\n      title={\n        <div>\n          Ledger BSC Account Address{' '}\n          <Button size=\"small\" onClick={handle}>\n            Get address\n          </Button>\n        </div>\n      }>\n      {address.map(item => (\n        <p key={item.address}>\n          {item.address} (hdPath: {item.hdPath})\n        </p>\n      ))}\n    </Card>\n  );\n};\n\nconst SignTransactionCard = () => {\n  const [tx, setTx] = React.useState({});\n  const [loading, setLoading] = React.useState(false);\n  const handle = React.useCallback(async () => {\n    try {\n      setLoading(true);\n      const _tx = await bridge.signTransaction(fakeTx, \"m/44'/60'/0'/0\");\n\n      setTx(_tx);\n    } catch (e) {\n      console.error(e);\n      notification.error({ message: e.message || e });\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return (\n    <Card\n      bordered={false}\n      loading={loading}\n      title={\n        <div>\n          Ledger BSC SignTransaction{' '}\n          <Button size=\"small\" onClick={handle}>\n            Sign\n          </Button>\n        </div>\n      }>\n      <pre>tx data: {JSON.stringify(fakeTx, null, 2)}</pre>\n      <pre>signed tx: {JSON.stringify(tx, null, 2)}</pre>\n    </Card>\n  );\n};\n\nconst SignMessage = () => {\n  const [hdPath, setHdPath] = useState(hdPaths.LedgerLive);\n  const [message, setMessage] = useState('');\n  const [signedMsg, setSignedMsg] = useState('');\n  const [loading, setLoading] = React.useState(false);\n\n  const handle = React.useCallback(async () => {\n    try {\n      setLoading(true);\n      await bridge.unlock();\n      const msg = await bridge.signMessage(message, hdPath);\n      setSignedMsg(msg);\n    } catch (e) {\n      console.error(e);\n      notification.error({ message: e.message || e });\n    } finally {\n      setLoading(false);\n    }\n  }, [hdPath, message]);\n\n  return (\n    <Card\n      bordered={false}\n      loading={loading}\n      title={\n        <div>\n          Ledger BSC SignMessage{' '}\n          <Button size=\"small\" onClick={handle}>\n            Sign\n          </Button>\n        </div>\n      }>\n      hdPath: <Input value={hdPath} onChange={e => setHdPath(e.target.value)} />\n      message:{' '}\n      <Input value={message} onChange={e => setMessage(e.target.value)} />\n      <pre>Signed message: {JSON.stringify(signedMsg, null, 2)}</pre>\n    </Card>\n  );\n};\n\nexport default () => (\n  <Card bordered={true} bodyStyle={{ background: 'lightblue' }}>\n    <GetAddressCard />\n    <SignTransactionCard />\n    <SignMessage />\n  </Card>\n);\n"],"names":["hdPaths","bridge","BSCLedgerBridge","fakeTx","Transaction","nonce","gasPrice","gasLimit","to","value","data","GetAddressCard","React","address","setAddress","loading","setLoading","handle","getFirstPage","console","error","message","useEffect","getPublicKey","log","bordered","title","size","onClick","map","item","hdPath","SignTransactionCard","tx","setTx","signTransaction","_tx","JSON","stringify","SignMessage","useState","setHdPath","setMessage","signedMsg","setSignedMsg","unlock","signMessage","msg","onChange","e","target","bodyStyle","background"],"sourceRoot":""}